The test program for the cgen-0 test:

  void main() {
    static u32 x = 0;
    for (;;) {
      x = x + 1;
    }
  }

  function main:
    static var x : u32, initial val 0
    bb0:
      %5 = const #1
      %10 = ld_static @x
      %15 = add %10, %5
      %20 = st_static %15, @x
      %30 = branch bb0

Expected CHDL output:

  // Function main()
  STATIC_VAR(main, x, ui<32>, 0x00000000);

  // Function main() interfaces
  typedef flit<chdl_void> main_call_t;
  typedef flit<chdl_void> main_ret_t;
  typedef flit<chdl_void> main_bb0_in_t;
  typedef flit<chdl_void> main_bb0_out_t;

  // main() function interfaces
  main_call_t main_call;
  main_ret_t main_ret;

  // main() basic block 0 interfaces
  main_bb0_in_t main_bb0_in;
  vec<1, main_bb0_out_t> main_bb0_out_prebuf, main_bb0_out;

  // main() basic block 0
  vec<2, main_bb0_in_t> main_bb0_arb_in;
  _(main_bb0_arb_in[0], "valid") = _(main_call, "valid");
  _(main_call, "ready") = _(main_bb0_arb_in[0], "ready");

  _(main_bb0_arb_in[1], "valid") = _(main_bb0_out, "valid");
  _(main_call, "ready") = _(main_bb0_arb_in[1], "ready");

  Arbiter(main_bb0_in, ArbRR<2>, main_bb0_arb_in);

  node main_bb0_run(_(main_bb0_in, "valid") &&
    _(main_bb0_out_prebuf[0], "ready"));
  
  ui<32> main_0 = Lit<32>(0x00000001);
  ui<32> main_1 = LD_STATIC(main, x);
  ui<32> main_2 = main_1 + main_0;
  ST_STATIC(main, x, main_2, main_bb0_run);

  _(main_bb0_out_prebuf[0], "valid") = _(main_bb0_in, "valid");
  _(main_bb0_in, "ready") = _(main_bb0_out_prebuf[0], "ready");

  for (unsigned i = 0; i < 1; ++i)
    Buffer<1>(main_bb0_out[i], main_bb0_out_prebuf[i]);
  

  STATIC_VAR_GEN(main, x);

Expected C++ output:


tasks/goals in order of planned completion:

  - Language definition
    - <2016-06-06>
    - Function replication? <2016-06-06>
    - Decide what to do about bit casts.
    - Do we really want a C-style preprocessor?
  - Sample programs
    - h2.1.bpi <2016-06-06>
    - gpu_cache.bpi
    - risc.bpi <2016-06-06>
    - cache.bpi
    - sort.bpi
    - rsort.bpi
    - binsearch.bpi
    - coalesce.bpi
  - Code gen/back end
    . Build a simple basic block level program for testing.
    . Test some simple structs and a type printing test program.
    . Write code generator that will build simple program. <2016-06-02>
      . Write a "to CHDL" type string converter.
      . Write a "to C++" type string converter.
      . Decide how to identify values (funcname_idx)
      . Write a CHDL runtime with support for static and global variables.
      . Try out the CHDL runtime with some sample code.
    . Build a basic block level program that has control flow and live values.
      <2016.06.08>
      . Get the code written in a cgen-1 example.
      . How do we handle block-to-block communication/generation? SSA/phi?
        - Use phis; the input of a block containing <1> = phi <0>, <11> will
	  contain val_1, not val_0 and val_11. Phi just copies from input.
	- All other external values are also copied from input.
      . Expand CHDL runtime to support block level control flow and live values.
    . Write code generator that will build the with-control-flow program.
      <2016-06-03>
      . Make in/out flits use value id/phi id as name of signal.
      . Write phi generator (just copy from input/output)
      . Make out-of-block arguments use input structure.
      . Write output structure contents assignments/connections.
        x Have to look for phis in destination to use the right name.
	  - Not true. This is done in the wiring up between blocks.
      . Write the runtime support, a buffer and a post-buffer selector.
    . Break the code generator code out into separate headers. <2016-06-03>
    . Separate the headers into .h and .cpp files. <2016-06-03>
    . Build a basic block level program that uses predicated instructions.
      <2016-06-06>
    . Write code generator that will handle predicated instructions.
      <2016-06-06>
    . Build a basic block level program that replaces elements of static arrays.
      (cgen-3) <2016-06-10>
    . Write code generator that will build the element-replacing program.
      <2016-06-10>
      . We need a complete LD_IDX/ST_IDX generator:
        . "index" for single element. "index/length" for multiple.
        . Use constants to read/write to fields of structs. .LD .ST
        . Use pairs of constants to index ranges of elements in arrays. .LD .ST
	. Use single variable to index fixed range of elements in array. .LD .ST
        . Use single const/var to index single elements of arrays. .LD .ST
    . Build a basic block level program that uses struct elements. (cgen-4)
      <2016-06-10>
    . Write code generator that will build the struct-based program.
      <2016-06-10>
    . Build a basic block level program that uses SRAM arrays. <2016-06-13>
    . Add support for SRAM arrays to code generator. <2016-06-13>
    - Figure out what we're going to do long-term about cycles and ready/stall
      signals. <2016-06-14>
    - Figure out what we're going to do long-term about multi-ported memories.
      <2016-06-14>
    - Build a basic block level program that makes function calls. <2016-06-14>
    - Add support for function calls to code generator. <2016-06-14>
    - Build a basic block level program that uses stalls. <2016-06-15>
    - Add support for stalls to code generator. <2016-06-15>
    - Build a basic block level program that uses bypassed SRAM arrays.
      <2016-06-16>
    - Add support for bypass networks to code generator. <2016-06-16>
    - Build a basic block level program that uses speculation. <2016-06-17>
    - Add support for speculation to code generator. <2016-06-17>
    - Add support for C++ output to code generator. <2016-06-20>
  - Parser/front end
    - Build a skeleton flex/bison parser <2016-06-21>
    - Get simple static function to parse to AST. <2016-06-22>
    - Get counter to parse to AST. <2016-06-23>
    - Get generic function to parse to AST. <2016-06-24>
    - Get simple AST to convert to IF. <2016-06-25>
    - Get generic function to parse to AST. <2016-06-26>
    - Get generic AST to convert to IF. <2016-06-27>
    - Get h3.bpi working. <2016-06-28>
    - Get risc.bpi working. <2016-06-29>
    - Get cache.bpi working. <2016-06-30>
  - Evaluation
    -
