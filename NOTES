tasks/goals in order of planned completion:
  - Bugs!
    - The set of running blocks in the C++ simulator does not exactly match the
      CHDL simulator, presumably due to the availability of both input and
      output buffers for pipeline stages.
    - Nested structs are untested.
  - Language definition
    - <2016-06-06>
    - Function replication? <2016-06-06>
    - Decide what to do about bit casts.
    - Do we really want a C-style preprocessor?
  - Sample programs
    - h2.1.bpi <2016-06-06>
    - gpu_cache.bpi
    - risc.bpi <2016-06-06>
    - cache.bpi
    - sort.bpi
    - rsort.bpi
    - binsearch.bpi
    - coalesce.bpi
  - Code gen/back end <2016-07-06-23>
    - Add support for C++ output to code generator (add separate cgen-cpp)
      <2016-07-27>
      - Full working prototype. (depending on being run after CHDL code gen)
        . asm-0.cpp
        . asm-1.cpp
          . Support for spawn
          . Correct support for bcast variables, including block reordering.
          . Proper stall support
        . macro-0.cpp
          . Write a C++ version of print_hex
        - macro-1.cpp
          . Add support to C++ codegen for static arrays.
          - Add support to C++ code generator for structs.
        - macro-2.cpp
        - macro-3.cpp
        . cgen-0.cpp
        - cgen-1.cpp
        - cgen-2.cpp
        - cgen-3.cpp
        - cgen-4.cpp
        - cgen-5.cpp
        - cgen-6.cpp
        - cgen-7.cpp
        - cgen-8.cpp
        - cgen-9.cpp
        - Simple loops and control flow
        - Stalls
        - Predicates
        - Structs and struct members.
        - Calls, arguments, and live value preservation
      - Split out phi conversion from CHDL code gen as a separate pass.
      - Split out static access id assignment as a separate pass.
    - Build a basic block level program using (arr/1val) global variables.
    - Add support for global variables to code generator. <2016-06-30>
    - Understand, enumerate, and automatically check (or remove) constraints.
      - Structural constraints:
        - Calls/spawns must be the final instruction in a basic block.
          (limit 1/block)
        - No cycles of basic blocks with st->ld broadcast var dependencies.
      - Timing constraints: 
    - Build a basic block level program that uses bypassed SRAM arrays.
    - Add support for bypass networks to code generator. <2016-07-10>
    - Build a basic block level program that uses speculation. <2016-07-10>
    - Add support for speculation to code generator. <2016-07-10>
    - Make TAPs run-time optional.
    - Make all of the tests self-report success or failure. <2016-07-10>
    - Decide whether functions need to be predicatable. <2016-07-10>
  . C++-based Pipeline Construction Macro Assembler <2016-07-10>
    . Write an assembler back-end.
    . Write a macro layer.
      . Basic macros
        . Vars, types, and operators
        . Constants
      . Structs and members
  - Parser/front end <?>
    - Build a skeleton flex/bison parser <?>
    - Get simple static function to parse to AST. <?>
    - Get counter to parse to AST. <?>
    - Get generic function to parse to AST.
    - Get simple AST to convert to IF.
    - Get generic function to parse to AST.
    - Get generic AST to convert to IF.
    - Get h3.bpi working.
    - Get risc.bpi working.
    - Get cache.bpi working.
  - Demo <2016-07-12>
  - Evaluation <2016-07-15>
