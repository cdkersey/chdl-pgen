tasks/goals in order of planned completion:
  - Bugs!
    - If a block appears in more than one successor group, the code generator
      will fail to generate a correct valid input signal.
      - In order to fix this, we should completely rewrite the generators.
    - The CHDL code for macro-4.cpp fails to compile; (using SingleRepl to
      replace 8 bits out of 32)
    - The set of running blocks in the C++ simulator does not exactly match the
      CHDL simulator, presumably due to the availability of both input and
      output buffers for pipeline stages and general slack in the pipeline.
    - Nested structs are untested and dependency ordering is not enforced for
      struct declaration.

  - Code gen/back end
    - Add value name annotation for debugging.
    - Predicated return should work as expected? Or maybe the stall signal is
      appropriate for this instead.
    - Understand, enumerate, and automatically check (or remove) constraints.
      - Structural constraints:
        - Calls/spawns must be the final instruction in a basic block.
          (limit 1/block)
        - No cycles of basic blocks with st->ld broadcast var dependencies.
      - Timing constraints:
    - Add "__" prefix to any internal names that may conflict with user names in
      generated code.
    - Build a basic block level program that uses bypassed SRAM arrays.
    - Add support for bypass networks to code generator.
    - Build a basic block level program that uses speculation.
    - Add support for speculation to code generator.
    - Make TAPs run-time optional.
    - Make all of the tests self-report success or failure.
    - Decide whether functions need to be predicatable.
  - Parser/front end
    - Build a skeleton flex/bison parser
    - Get simple static function to parse to AST.
    - Get counter to parse to AST.
    - Get generic function to parse to AST.
    - Get simple AST to convert to IF.
    - Get generic function to parse to AST.
    - Get generic AST to convert to IF.
    - Get h3.bpi working.
    - Get risc.bpi working.
    - Get cache.bpi working.
  - Language definition
    - Function replication?
    - Decide what to do about bit casts.
    - Do we really want a C-style preprocessor?
  - Sample programs
    - h2.1.bpi
    - gpu_cache.bpi
    - risc.bpi
    - cache.bpi
    - sort.bpi
    - rsort.bpi
    - binsearch.bpi
    - coalesce.bpi

  - Demo
  - Evaluation
